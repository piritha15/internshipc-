#include <iostream>
#include <vector>

using namespace std;

// Task structure to store task details
struct Task {
    string description;
    // You can add more fields like due date, priority, etc. as needed
};

class TodoList {
private:
    vector<Task> tasks;

public:
    // Function to add a task to the list
    void addTask(const string& description) {
        Task newTask;
        newTask.description = description;
        tasks.push_back(newTask);
        cout << "Task added successfully!\n";
    }

    // Function to view all tasks in the list
    void viewTasks() {
        if (tasks.empty()) {
            cout << "No tasks available.\n";
        } else {
            cout << "Tasks:\n";
            for (size_t i = 0; i < tasks.size(); ++i) {
                cout << i + 1 << ". " << tasks[i].description << endl;
            }
        }
    }

    // Function to delete a task from the list
    void deleteTask(int taskNumber) {
        if (taskNumber >= 1 && taskNumber <= static_cast<int>(tasks.size())) {
            tasks.erase(tasks.begin() + taskNumber - 1);
            cout << "Task deleted successfully!\n";
        } else {
            cout << "Invalid task number. Please try again.\n";
        }
    }
};

int main() {
    TodoList todoList;
    int choice;

    do {
        cout << "\nTO-DO LIST\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Delete Task\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                string description;
                cout << "Enter task description: ";
                cin.ignore(); // Ignore newline character in the buffer
                getline(cin, description);
                todoList.addTask(description);
                break;
            }
            case 2:
                todoList.viewTasks();
                break;
            case 3: {
                int taskNumber;
                cout << "Enter task number to delete: ";
                cin >> taskNumber;
                todoList.deleteTask(taskNumber);
                break;
            }
            case 4:
                cout << "Exiting program. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 4);

    return 0;
}
